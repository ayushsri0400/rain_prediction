weathernew <- read.csv("D:/thesis/waste data set/weathernew.csv")
weathernew <- read.csv("D:/thesis/waste data set/weathernew.csv")
View(weathernew)
setwd("D:/thesis/waste data set")
weathernew$Date= NULL
weathernew$WindDir = NULL
regression = weathernew
regression$Location = NULL
summary(regression$MinTemp)
regression$MaxTemp[is.na(regression$MaxTemp)]<-mean(regression$MaxTemp[!is.na(regression$MaxTemp)])
regression$MinTemp[is.na(regression$MinTemp)]<-mean(regression$MinTemp[!is.na(regression$MinTemp)])
regression$Rainfall[is.na(regression$Rainfall)]<-mean(regression$Rainfall[!is.na(regression$Rainfall)])
regression$WindSpeed[is.na(regression$WindSpeed)]<-mean(regression$WindSpeed[!is.na(regression$WindSpeed)])
regression$Humidity[is.na(regression$Humidity)]<-mean(regression$Humidity[!is.na(regression$Humidity)])
regression$Pressure[is.na(regression$Pressure)]<-mean(regression$Pressure[!is.na(regression$Pressure)])
regression$Cloud[is.na(regression$Cloud)]<-mean(regression$Cloud[!is.na(regression$Cloud)])
names(regression)
plot(Humidity~RAinTomorrow, data = regression)
plot(Humidity~Rainfall, data = regression)
plot(MaxTemp~Rainfall, data = regression)
plot(Rainfall~MaxTemp, data = regression)
cor(regression$Rainfall, regression$MaxTemp)
cor(regression$MinTemp, regression$MaxTemp)
plot(MinTemp~MaxTemp, data = regression)
avg = mean(regression$MinTemp)
avg2 = mean(regression$MaxTemp)
abline(h=avg)
abline(h=avg,col = "red")
cor(regression$Rainfall, regression$Humidity)
avg = mean(regression$Rainfall)
abline(h = avg,col = "red")
cor(regression$Rainfall, regression$Cloud)
model1 = lm(Rainfall~Cloud, data = regression)
abline(model1,col)
abline(h = avg,col = "red")
plot(Rainfall~Cloud, data = regression)
normalize <- function(x) {
+     return((x-min(x)) / (max(x)-min(x)))}
View(regression)
new1 = as.data.frame(lapply(regression[,c(1,2,3,4,5,6,7)],normalize))
View(new1)
plot(Rainfall~Cloud, data = new1)
abline(h = avg,col = "red")
abline(model1,col= yellow)
abline(model1,col= yellowe)
abline(model1,col= green)
abline(model1,col= "green")
model1
plot(model1)
#k-means
kmean = regression
ans = kmeans(kmean, 2)
summary(kmean$MinTemp)
summary(kmean$MaxTemp)
summary(kmean$Cloud)
summary(kmean$Rainfall)
summary(kmean$Humidity)
summary(kmean$WindSpeed)
summary(kmean$Pressure)
new1 = kmean
new1$RainTomorrow = NULL
ans = kmeans(new1, 2)
able(kmean$Location,ans$cluster)
table(kmean$Location,ans$cluster)
ans = kmeans(new1,5)
table(weathernew$Location,ans$cluster)
plot(new[c("MinTemp","MaxTemp")],col = new$Location)
plot(new[c("MinTemp","MaxTemp")],col = weathernew$Location)
plot(weathernew[c("Rainfall","Cloud")],col = weathernew$Location)
plot(kmean[c("Cloud","Rainfall")],col = weathernew$Location)
View(kmean)
#naive bayees
str(weathernew)
install.packages("naivebayes")
library(naivebayes)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("psych")
library(psych)
new = weathernew
new$Rainfall = as.factor(weathernew$Rainfall)
xtabs(~Rainfall+RainTomorrow, data = new)
pairs.panels(new[-1])
new %>%
ggplot(aes(x=RainTomorrow,y=Humidity, fill=RainTomorrow)) +
geom_boxplot()+
ggtitle("box plot")
new%>%
ggplot(aes(x= Humidity,fill=RainTomorrow))+
geom_density(alpha=0.8,color="black")+
ggtitle("desity plot")
set.seed(1111)
ind = sample(2,nrow(new),replace = T,prob = c(0.8.0.2))
train = new[ind==1]
test = new[int==2]
model = naive_bayes(~RainTomorrow~.,data = train)
model
train%>%
filter(RainTomorrow="0")%>%
summarize(mean(Humidity),sd(Humidity))
plot(model)
#predict
p = predict(model,train,type = 'prob')
head(cbind(p,train))
#confussion matrix-train data
p1 = predict(model,train)
(tab1 = table(p1,train$RainTomorrow))
